var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "state", ()=>state
);
parcelHelpers.export(exports, "loadRecipe", ()=>loadRecipe
);
parcelHelpers.export(exports, "loadSearchResults", ()=>loadSearchResults
);
parcelHelpers.export(exports, "getSearchResultsPage", ()=>getSearchResultsPage
);
var _configJs = require("./config.js");
var _helpersJs = require("./helpers.js");
const state = {
    //! Creation of variable state that holds ALL OUR DATA FOR APPLICATION
    recipe: {
    },
    search: {
        query: '',
        results: [],
        page: 1,
        resultsPerPage: _configJs.RES_PER_PAGE
    }
};
const loadRecipe = async (id)=>{
    try {
        const data = await _helpersJs.getJSON(`${_configJs.API_URL}${id}`);
        const { recipe  } = data.data; // Destucture of data object received back on the recipe key
        state.recipe = {
            // Creation of new recipe object because the data object returned has a lot of underscores in names and we don't want that in our variable names; Reassigning our recipte variable we created above and using destructured recipe variable to retrieve key/value pairs.
            id: recipe.title,
            publisher: recipe.publisher,
            sourceURL: recipe.source_url,
            image: recipe.image_url,
            servings: recipe.servings,
            cookingTime: recipe.cooking_time,
            ingredients: recipe.ingredients
        };
    } catch (error) {
        console.error(`${error}ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥`);
        throw error;
    }
    console.log(state.recipe);
};
const loadSearchResults = async (query)=>{
    try {
        state.search.query = query;
        const data = await _helpersJs.getJSON(`${_configJs.API_URL}?search=${query}`);
        console.log(data);
        state.search.results = data.data.recipes.map((rec)=>{
            return {
                id: rec.id,
                title: rec.title,
                publisher: rec.publisher,
                image: rec.image_url
            };
        });
    } catch (error) {
        console.error(`${error}ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥`);
        throw error;
    }
};
const getSearchResultsPage = (page = state.search.page)=>{
    state.search.page = page;
    const start = (page - 1) * state.search.resultsPerPage;
    const end = page * state.search.resultsPerPage;
    return state.search.results.slice(start, end);
};
