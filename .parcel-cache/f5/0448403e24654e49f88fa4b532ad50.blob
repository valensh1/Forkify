var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _modelJs = require("./model.js");
var _recipeViewJs = require("./views/recipeView.js");
var _recipeViewJsDefault = parcelHelpers.interopDefault(_recipeViewJs);
var _searchViewJs = require("./views/searchView.js");
var _searchViewJsDefault = parcelHelpers.interopDefault(_searchViewJs);
var _resultsViewJs = require("./views/resultsView.js");
var _resultsViewJsDefault = parcelHelpers.interopDefault(_resultsViewJs);
var _paginationViewJs = require("./views/paginationView.js");
var _paginationViewJsDefault = parcelHelpers.interopDefault(_paginationViewJs);
// import 'core-js/stable';  // Polyfilling which is basically making sure some features work in older browsers; Pollyfills everything other than async/await
var _regeneratorRuntime = require("regenerator-runtime"); // Polyfilling which is basically making sure some features work in older browsers; Pollyfills async/await
// Jonas Recipe API Documentation - https://forkify-api.herokuapp.com/v2
if (module.hot) // Code here enables the hot module replacement, which reloads the modules that changed without refreshing the whole website. This is code strictly for Parcel and JavaScript wouldn't understand this by itself without Parcel installed.
module.hot.accept();
// API Call
const controlRecipes = async ()=>{
    try {
        const id = window.location.hash.slice(1); // Creation of variable id that gets the hash tag id number out of a windows search bar.
        console.log(id);
        if (!id) return; // Guard clause saying if there is no id then just return. This is a modern way to use if else statement without having to put tons of lines of code within blocks
        _recipeViewJsDefault.default.renderSpinner(); // Invoke the renderSpinner function.
        // Loading Recipe
        await _modelJs.loadRecipe(id); // Calling the loadRecipe function and passing in the id from our model.js file. Since this is essentially an API/AJAX call and this returns a promise we need to await that promise.
        // Rendering Recipe
        _recipeViewJsDefault.default.render(_modelJs.state.recipe);
    } catch (error) {
        _recipeViewJsDefault.default.renderError();
    }
};
const controlSearchResults = async ()=>{
    try {
        _resultsViewJsDefault.default.renderSpinner(); // Shows spinner when recipe results of search are loading on left side of page
        // Get search query
        const query = _searchViewJsDefault.default.getQuery(); // Gets user search item from search field
        if (!query) return; // Guard clause that if no search term entered by user then just return and it WILL NOT run lines of code below
        // Load search results
        await _modelJs.loadSearchResults(query); // invokes the loadSearchResults method passing in the search item from user and then awaiting the API call with the list of recipes related to that search item entered by user
        // Render results
        _resultsViewJsDefault.default.render(_modelJs.getSearchResultsPage()); // Invokes render method which ultimately displays each recipe on left side of page with the pagination results (e.g. 10 recipe results per page)
        // Render initial pagination buttons
        _paginationViewJsDefault.default.render(_modelJs.state.search); // Invokes render method which ultimately displays the pagination buttons on the bottom of the recipe results so the user can scroll pages of recipe results on left side of page.
    } catch (error) {
        console.log(error);
    }
};
const controlPagination = (goToPage)=>{
    // Render NEW results
    _resultsViewJsDefault.default.render(_modelJs.getSearchResultsPage(goToPage));
    // Render NEW pagination buttons
    _paginationViewJsDefault.default.render(_modelJs.state.search);
};
const init = ()=>{
    _recipeViewJsDefault.default.addHandlerRender(controlRecipes); // Passing the controlRecipes function to the event listener that is in our recipeView file
    _searchViewJsDefault.default.addHandlerSearch(controlSearchResults); // Passes the conrolSearchResults method to the searchView addHandlerSearch method STRICTLY JUST TO HAVE THE EVENT LISTENER ON THE VIEWS PAGE BUT THE FUNCTIONALITY OF THE EVENT LISTENER IS ESSENTIALLY PASSED BACK TO CONTROLLER HERE AND IS CONTROLLED BY THE controlSearchResults METHOD ABOVE.
    _paginationViewJsDefault.default.addHandlerClick(controlPagination);
};
init(); // Invokes the init function above
